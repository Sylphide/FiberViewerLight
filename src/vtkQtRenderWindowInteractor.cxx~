/*=========================================================================

  Program:   FiberViewer
  Module:    $RCSfile: vtkQtRenderWindowInteractor.cxx,v $
  Language:  C++
  Date:      $Date: 2007/08/14 19:55:44 $
  Version:   $Revision: 1.1 $
  Author:    Matthieu Jomier

  Copyright (c) 2004 NeuroImaging Lab @ UNC. All rights reserved.
  See NeuroLibCopyright.txt for details.

     This software is distributed WITHOUT ANY WARRANTY; without even 
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
  
#include "vtkQtRenderWindowInteractor.h"  
#include "vtkQtRenderWindow.h"
#include <ctype.h>  
  
vtkQtRenderWindowInteractor::vtkQtRenderWindowInteractor() {  
    qtRenWin = NULL;  
}  
  
vtkQtRenderWindowInteractor::~vtkQtRenderWindowInteractor() {  
}  
  
void vtkQtRenderWindowInteractor::Start() {  
    if (! this->qtRenWin) {  
        vtkErrorMacro(<<"No vtkQtRenderWindow defined!");  
        return;  
    }  
    if (! qApp) {  
        vtkErrorMacro(<<"No QApplication defined!");  
        return;  
    }  
//     if (!qApp->mainWidget()) {  
//         qApp->setMainWidget(qtRenWin);  
//         qApp->exec();  
//     }  
}  
  
void vtkQtRenderWindowInteractor::SetRenderWindow(vtkQtRenderWindow* aren) {  
    qtRenWin = aren;  
    aren->SetInteractor(this);  
    vtkRenderWindowInteractor::SetRenderWindow(aren);  
    qtRenWin->GetSize(Size[0],Size[1]);  
}  
  
void vtkQtRenderWindowInteractor::PrintSelf(ostream&os, vtkIndent indent) {  
    vtkRenderWindowInteractor::PrintSelf(os, indent);  
}  
  
void vtkQtRenderWindowInteractor::mousePressEvent(QMouseEvent *me) {  
    if (!Enabled)  
        return;  
  
    qtRenWin->GetSize(Size[0],Size[1]);  
  
    int ctrl = 0, shift = 0;  
    if (me->modifiers() & Qt::ControlModifier)  
        ctrl = 1;  
	 if (me->modifiers() & Qt::ShiftModifier)  
        shift = 1;  
    int xp = me->x();  
    int yp = me->y();  
    SetEventInformationFlipY(xp, yp, ctrl, shift);  
  
    switch (me->button()) {  
    case Qt::LeftButton:  
  InvokeEvent(vtkCommand::LeftButtonPressEvent,NULL);  
        break;  
    case Qt::MidButton:  
  InvokeEvent(vtkCommand::MiddleButtonPressEvent,NULL);  
        break;  
    case Qt::RightButton:  
  InvokeEvent(vtkCommand::RightButtonPressEvent,NULL);  
        break;  
    default:  
        return;  
    }  
}  
  
void vtkQtRenderWindowInteractor::mouseReleaseEvent(QMouseEvent *me) {  
    if (!Enabled)  
        return;  
  
    qtRenWin->GetSize(Size[0],Size[1]);  
  
    int ctrl = 0, shift = 0;  
    if (me->modifiers() & Qt::ControlModifier)  
        ctrl = 1;  
    if (me->modifiers() & Qt::ShiftModifier)  
        shift = 1;  
    int xp = me->x();  
    int yp = me->y();  
    SetEventInformationFlipY(xp, yp, ctrl, shift);  
  
    switch (me->button()) {  
    case Qt::LeftButton:  
  InvokeEvent(vtkCommand::LeftButtonReleaseEvent,NULL);  
        break;  
    case Qt::MidButton:  
  InvokeEvent(vtkCommand::MiddleButtonReleaseEvent,NULL);  
        break;  
    case Qt::RightButton:  
  InvokeEvent(vtkCommand::RightButtonReleaseEvent,NULL);  
        break;  
    default:  
        return;  
    }  
  
}  
  
void vtkQtRenderWindowInteractor::mouseMoveEvent(QMouseEvent *me) {  
    if (!Enabled)  
        return;  
  
    qtRenWin->GetSize(Size[0],Size[1]);  
  
    int ctrl = 0, shift = 0;  
    if (me->modifiers() & Qt::ControlModifier)  
        ctrl = 1;  
    if (me->modifiers() & Qt::ShiftModifier)  
        shift = 1;  
    int xp = me->x();  
    int yp = me->y();  
    SetEventInformationFlipY(xp, yp, ctrl, shift);  
    InvokeEvent(vtkCommand::MouseMoveEvent, NULL);  
}  
  
void vtkQtRenderWindowInteractor::timer() {  
    if (!Enabled)  
        return;  
    InvokeEvent(vtkCommand::TimerEvent,NULL);  
}  
  
int vtkQtRenderWindowInteractor::CreateTimer(int timertype) {  
    if (timertype == VTKI_TIMER_FIRST) {  
      QObject::connect(&qTimer, SIGNAL(timeout()), SLOT(timer()));  
      qTimer.start(10);  
    }  
    return 1;  
}  
  
int vtkQtRenderWindowInteractor::DestroyTimer() {  
    qTimer.stop();  
    QObject::disconnect(&qTimer, SIGNAL(timeout()), this, 0);  
    return 1;  
}  
  
void vtkQtRenderWindowInteractor::keyPressEvent(QKeyEvent *ke) {  
    if (!Enabled)  
        return;  
  
    qtRenWin->GetSize(Size[0],Size[1]);  
  
    int ctrl = 0, shift = 0;  
    if (ke->modifiers() & Qt::ControlModifier)  
        ctrl = 1;  
    if (ke->modifiers() & Qt::ShiftModifier)  
        shift = 1;  
    QPoint cp = qtRenWin->mapFromGlobal(QCursor::pos());  
    int xp = cp.x();  
    int yp = cp.y();  
	 SetEventInformationFlipY(xp, yp, ctrl, shift, (char) tolower(ke->text().toAscii().toInt()), 1, (const char *) ke->text().toStdString());  
    InvokeEvent(vtkCommand::KeyPressEvent, NULL);  
    InvokeEvent(vtkCommand::CharEvent, NULL);  
}  
